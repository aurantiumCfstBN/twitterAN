"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var path = require("path");
var chai_1 = require("chai");
var fs = require("fs-extra");
var mocha_1 = require("mocha");
var tmp = require("tmp");
var files_1 = require("./../src/files");
var utils_js_1 = require("./../src/utils.js");
var copyFileSync = require('fs-copy-file-sync');
var spawnSync = require('child_process').spawnSync;
var TEST_CODE_JS = 'function test() { Logger.log(\'test\'); }';
var TEST_JSON = '{"timeZone": "America/New_York"}';
var CLASP = (os.type() === 'Windows_NT') ? 'clasp.cmd' : 'clasp';
var isPR = process.env.TRAVIS_PULL_REQUEST;
var CLASP_SETTINGS = JSON.stringify({
    scriptId: process.env.SCRIPT_ID,
});
var CLASP_USAGE = 'Usage: clasp <command> [options]';
var claspSettingsLocalPath = '.clasp.json'; // path.join('./', '.clasp.json');
var claspRcGlobalPath = path.join(os.homedir(), '.clasprc.json');
var claspRcLocalPath = '.clasprc.json'; // path.join('./', '.clasprc.json');
var clientCredsLocalPath = 'client_credentials.json'; // path.join('./', 'client_credentials.json');
var cleanup = function () {
    fs.removeSync('.clasp.json');
    fs.removeSync('.claspignore');
    fs.removeSync('Code.js');
    fs.removeSync('appsscript.json');
};
var setup = function () {
    fs.writeFileSync('.clasp.json', CLASP_SETTINGS);
};
var rndStr = function () { return Math.random().toString(36).substr(2); };
var FAKE_CLASPRC = JSON.stringify({
    access_token: rndStr(),
    refresh_token: rndStr(),
    scope: 'https://www.googleapis.com/auth/script.projects',
    token_type: 'Bearer',
    expiry_date: (new Date()).getTime(),
});
var FAKE_CLASPRC_LOCAL = JSON.stringify({
    token: FAKE_CLASPRC,
    oauth2ClientSettings: {
        clientId: rndStr() + ".apps.googleusercontent.com",
        clientSecret: rndStr(),
    },
});
var CLASP_SETTINGS_FAKE_PROJECTID = JSON.stringify({
    scriptId: process.env.SCRIPT_ID,
    projectId: "project-id-" + rndStr(),
});
var FAKE_CLIENT_CREDS = JSON.stringify({
    installed: {
        client_id: rndStr() + ".apps.googleusercontent.com",
        client_secret: rndStr(),
    },
});
var INVALID_CLIENT_CREDS = JSON.stringify({
    installed: {
        client_id: rndStr() + ".apps.googleusercontent.com",
    },
});
var backupSettings = function () {
    // fs.copyFileSync isn't supported in Node 6/7
    if (fs.existsSync(claspRcGlobalPath)) {
        copyFileSync(claspRcGlobalPath, claspRcGlobalPath + "~");
    }
    if (fs.existsSync(claspRcLocalPath)) {
        copyFileSync(claspRcLocalPath, claspRcLocalPath + "~");
    }
    if (fs.existsSync(claspSettingsLocalPath)) {
        copyFileSync(claspSettingsLocalPath, claspSettingsLocalPath + "~");
    }
};
var restoreSettings = function () {
    if (fs.existsSync(claspRcGlobalPath + "~")) {
        fs.renameSync(claspRcGlobalPath + "~", claspRcGlobalPath);
    }
    if (fs.existsSync(claspRcLocalPath + "~")) {
        fs.renameSync(claspRcLocalPath + "~", claspRcLocalPath);
    }
    if (fs.existsSync(claspSettingsLocalPath + "~")) {
        fs.renameSync(claspSettingsLocalPath + "~", claspSettingsLocalPath);
    }
};
mocha_1.describe('Test --help for each function', function () {
    var expectHelp = function (command, expected) {
        var result = spawnSync(CLASP, [command, '--help'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include(expected);
    };
    mocha_1.it('should run --help', function () { return expectHelp('run', 'Run a function in your Apps Scripts project'); });
    mocha_1.it('should logs --help', function () { return expectHelp('logs', 'Shows the StackDriver logs'); });
    mocha_1.it('should login --help', function () { return expectHelp('login', 'Log in to script.google.com'); });
    mocha_1.it('should logout --help', function () { return expectHelp('logout', 'Log out'); });
    mocha_1.it('should create --help', function () { return expectHelp('create', 'Create a script'); });
    mocha_1.it('should clone --help', function () { return expectHelp('clone', 'Clone a project'); });
    mocha_1.it('should pull --help', function () { return expectHelp('pull', 'Fetch a remote project'); });
    mocha_1.it('should push --help', function () { return expectHelp('push', 'Update the remote project'); });
    mocha_1.it('should status --help', function () { return expectHelp('status', 'Lists files that will be pushed by clasp'); });
    mocha_1.it('should open --help', function () { return expectHelp('open', 'Open a script'); });
    mocha_1.it('should deployments --help', function () { return expectHelp('deployments', 'List deployment ids of a script'); });
    mocha_1.it('should undeploy --help', function () { return expectHelp('undeploy', 'Undeploy a deployment of a project'); });
    mocha_1.it('should redeploy --help', function () { return expectHelp('redeploy', 'Update a deployment'); });
    mocha_1.it('should versions --help', function () { return expectHelp('versions', 'List versions of a script'); });
    mocha_1.it('should version --help', function () { return expectHelp('version', 'Creates an immutable version of the script'); });
    mocha_1.it('should list --help', function () { return expectHelp('list', 'List App Scripts projects'); });
    mocha_1.it('should apis --help', function () { return expectHelp('apis', 'List, enable, or disable apis'); });
    mocha_1.it('should help --help', function () { return expectHelp('help', 'Display help'); });
});
mocha_1.describe('Test clasp list function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
    });
    mocha_1.it('should list clasp projects correctly', function () {
        var result = spawnSync(CLASP, ['list'], { encoding: 'utf8' });
        // Every project starts with this base URL, thus
        // using clasp list should at least contain this
        // in its output.
        chai_1.expect(result.stdout).to.contain('https://script.google.com/d/');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe('Test clasp create function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
    });
    mocha_1.it('should prompt for a project name correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync(CLASP, ['create'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Give a script title:');
    });
    mocha_1.it('should not prompt for project name', function () {
        fs.writeFileSync('.clasp.json', '');
        var result = spawnSync(CLASP, ['create'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Project file (.clasp.json) already exists.');
    });
    after(cleanup);
});
mocha_1.describe.skip('Test clasp create <title> function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
    });
    mocha_1.it('should create a new project named <title> correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync(CLASP, ['create', 'myTitle'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Created new script: https://script.google.com/d/');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe('Test clasp clone <scriptId> function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    mocha_1.it('should clone an existing project correctly', function () {
        var settings = JSON.parse(fs.readFileSync('.clasp.json', 'utf8'));
        fs.removeSync('.clasp.json');
        var result = spawnSync(CLASP, ['clone', settings.scriptId], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should give an error on a non-existing project', function () {
        fs.removeSync('./.clasp.json');
        var result = spawnSync(CLASP, ['clone', 'non-existing-project'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('> Did you provide the correct scriptId?');
        chai_1.expect(result.status).to.equal(1);
    });
    after(cleanup);
});
mocha_1.describe('Test clasp pull function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    mocha_1.it('should pull an existing project correctly', function () {
        var result = spawnSync(CLASP, ['pull'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    after(cleanup);
});
mocha_1.describe('Test clasp push function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    mocha_1.it.skip('should push local project correctly', function () {
        fs.removeSync('.claspignore');
        fs.writeFileSync('Code.js', TEST_CODE_JS);
        fs.writeFileSync('appsscript.json', TEST_JSON);
        fs.writeFileSync('.claspignore', '**/**\n!Code.js\n!appsscript.json');
        var result = spawnSync(CLASP, ['push'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Pushed');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it.skip('should return non-0 exit code when push failed', function () {
        fs.writeFileSync('.claspignore', '**/**\n!Code.js\n!appsscript.json\n!unexpected_file');
        fs.writeFileSync('unexpected_file', TEST_CODE_JS);
        var result = spawnSync(CLASP, ['push'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Invalid value at');
        chai_1.expect(result.stderr).to.contain('UNEXPECTED_FILE');
        chai_1.expect(result.stderr).to.contain('Files to push were:');
        chai_1.expect(result.status).to.equal(1);
    });
    after(cleanup);
});
mocha_1.describe('Test clasp status function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    function setupTmpDirectory(filepathsAndContents) {
        fs.ensureDirSync('tmp');
        var tmpdir = tmp.dirSync({ unsafeCleanup: true, dir: 'tmp/', keep: false }).name;
        filepathsAndContents.forEach(function (_a) {
            var file = _a.file, data = _a.data;
            fs.outputFileSync(path.join(tmpdir, file), data);
        });
        return tmpdir;
    }
    mocha_1.it('should respect globs and negation rules', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.claspignore', data: '**/**\n!build/main.js\n!appsscript.json' },
            { file: 'build/main.js', data: TEST_CODE_JS },
            { file: 'appsscript.json', data: TEST_JSON },
            { file: 'shouldBeIgnored', data: TEST_CODE_JS },
            { file: 'should/alsoBeIgnored', data: TEST_CODE_JS },
        ]);
        spawnSync(CLASP, ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync(CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.claspignore',
            'should/alsoBeIgnored',
            'shouldBeIgnored',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['build/main.js', 'appsscript.json']);
    });
    mocha_1.it('should ignore dotfiles if the parent folder is ignored', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.claspignore', data: '**/node_modules/**\n**/**\n!appsscript.json' },
            { file: 'appsscript.json', data: TEST_JSON },
            { file: 'node_modules/fsevents/build/Release/.deps/Release/.node.d', data: TEST_CODE_JS },
        ]);
        spawnSync(CLASP, ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync(CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.claspignore',
            'node_modules/fsevents/build/Release/.deps/Release/.node.d',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['appsscript.json']);
    });
    mocha_1.it('should respect globs and negation rules when rootDir given', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.clasp.json', data: '{ "scriptId":"1234", "rootDir":"dist" }' },
            { file: '.claspignore', data: '**/**\n!dist/build/main.js\n!dist/appsscript.json' },
            { file: 'dist/build/main.js', data: TEST_CODE_JS },
            { file: 'dist/appsscript.json', data: TEST_JSON },
            { file: 'dist/shouldBeIgnored', data: TEST_CODE_JS },
            { file: 'dist/should/alsoBeIgnored', data: TEST_CODE_JS },
        ]);
        spawnSync(CLASP, ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync(CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        console.log(result.stdout);
        console.log(result.stderr);
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members(['dist/shouldBeIgnored', 'dist/should/alsoBeIgnored']);
        chai_1.expect(resultJson.filesToPush).to.have.members(['dist/build/main.js', 'dist/appsscript.json']);
        // TODO test with a rootDir with a relative directory like "../src"
    });
    after(cleanup);
});
mocha_1.describe('Test clasp open function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    mocha_1.it('should open a project correctly', function () {
        var result = spawnSync(CLASP, ['open'], { encoding: 'utf8' });
        //should open a browser with the project
        chai_1.expect(result.status).to.equal(0);
    });
    after(cleanup);
});
mocha_1.describe('Test clasp deployments function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    mocha_1.it('should list deployments correctly', function () {
        var result = spawnSync(CLASP, ['deployments'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Deployment');
        chai_1.expect(result.status).to.equal(0);
    });
    after(cleanup);
});
mocha_1.describe('Test clasp deploy function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    // Could fail to to maximum deployments (20)
    // TODO: skip test if at maximum
    mocha_1.it('should deploy correctly', function () {
        var result = spawnSync(CLASP, ['deploy'], { encoding: 'utf8' });
        if (result.stderr) {
            var err1 = 'Scripts may only have up to 20 versioned deployments at a time';
            var err2 = 'Currently just one deployment can be created at a time';
            var re = "(?:" + err1 + "|" + err2 + ")";
            chai_1.expect([result.stderr]).to.match(new RegExp(re));
            chai_1.expect(result.status).to.equal(1);
        }
        else {
            chai_1.expect(result.stdout).to.contain('Created version ');
            chai_1.expect(result.status).to.equal(0);
        }
    });
    after(cleanup);
});
mocha_1.describe('Test clasp version and versions function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    var versionNumber = '';
    mocha_1.it('should create new version correctly', function () {
        var result = spawnSync(CLASP, ['version'], { encoding: 'utf8' });
        if (result.stderr) {
            chai_1.expect(result.status).to.equal(1);
        }
        else {
            chai_1.expect(result.stdout).to.contain('Created version ');
            chai_1.expect(result.status).to.equal(0);
            versionNumber = result.stdout.substring(result.stdout.lastIndexOf(' '), result.stdout.length - 2);
        }
        mocha_1.it('should list versions correctly', function () {
            var result = spawnSync(CLASP, ['versions'], { encoding: 'utf8' });
            chai_1.expect(result.stdout).to.contain('Versions');
            if (versionNumber)
                chai_1.expect(result.stdout).to.contain(versionNumber + ' - ');
            chai_1.expect(result.status).to.equal(0);
        });
    });
    after(cleanup);
});
mocha_1.describe('Test clasp clone function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    mocha_1.it('should prompt for which script to clone correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync(CLASP, ['clone'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Clone which script?');
    });
    mocha_1.it('should give an error if .clasp.json already exists', function () {
        fs.writeFileSync('.clasp.json', '');
        var result = spawnSync(CLASP, ['clone'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Project file (.clasp.json) already exists.');
        chai_1.expect(result.status).to.equal(1);
    });
    after(cleanup);
});
mocha_1.describe('Test getAppsScriptFileName function from files', function () {
    mocha_1.it('should return the basename correctly', function () {
        chai_1.expect(files_1.getAppsScriptFileName('./', 'appsscript.json')).to.equal('appsscript');
        chai_1.expect(files_1.getAppsScriptFileName('', 'appsscript.json')).to.equal('appsscript');
        chai_1.expect(files_1.getAppsScriptFileName('./dist', './dist/appsscript.json')).to.equal('appsscript');
        chai_1.expect(files_1.getAppsScriptFileName('./dist', './dist/foo/Code.js')).to.equal('foo/Code');
    });
});
mocha_1.describe('Test URL helper from utils', function () {
    mocha_1.it('should return the scriptURL correctly', function () {
        var url = utils_js_1.URL.SCRIPT('abcdefghijklmnopqrstuvwxyz');
        chai_1.expect(url).to.equal('https://script.google.com/d/abcdefghijklmnopqrstuvwxyz/edit');
    });
});
mocha_1.describe('Test getWebApplicationURL function from utils', function () {
    mocha_1.it('should return the scriptURL correctly', function () {
        var url = utils_js_1.getWebApplicationURL({
            entryPoints: [
                {
                    entryPointType: 'WEB_APP',
                    webApp: {
                        url: 'https://script.google.com/macros/s/abcdefghijklmnopqrstuvwxyz/exec',
                    },
                },
            ],
        });
        chai_1.expect(url).to.equal('https://script.google.com/macros/s/abcdefghijklmnopqrstuvwxyz/exec');
    });
});
mocha_1.describe('Test getDefaultProjectName function from utils', function () {
    mocha_1.it('should return the current directory name correctly', function () {
        chai_1.expect(utils_js_1.getDefaultProjectName()).to.equal('Clasp');
    });
});
mocha_1.describe('Test getFileType function from utils', function () {
    mocha_1.it('should return the lowercase file type correctly', function () {
        chai_1.expect(files_1.getFileType('SERVER_JS')).to.equal('js');
        chai_1.expect(files_1.getFileType('GS')).to.equal('gs');
        chai_1.expect(files_1.getFileType('JS')).to.equal('js');
        chai_1.expect(files_1.getFileType('HTML')).to.equal('html');
    });
    mocha_1.it('should return the specified file extention if the file type is SERVER_JS', function () {
        chai_1.expect(files_1.getFileType('SERVER_JS', 'gs')).to.equal('gs');
        chai_1.expect(files_1.getFileType('GS', 'js')).to.equal('gs');
        chai_1.expect(files_1.getFileType('JS', 'gs')).to.equal('js');
        chai_1.expect(files_1.getFileType('HTML', 'js')).to.equal('html');
    });
});
mocha_1.describe('Test getAPIFileType function from utils', function () {
    mocha_1.it('should return the uppercase file type correctly', function () {
        chai_1.expect(utils_js_1.getAPIFileType('file.GS')).to.equal('SERVER_JS');
        chai_1.expect(utils_js_1.getAPIFileType('file.JS')).to.equal('SERVER_JS');
        chai_1.expect(utils_js_1.getAPIFileType('file.js')).to.equal('SERVER_JS');
        chai_1.expect(utils_js_1.getAPIFileType('file.jsx')).to.equal('JSX');
        chai_1.expect(utils_js_1.getAPIFileType('file.js.html')).to.equal('HTML');
    });
});
mocha_1.describe('Test saveProject function from utils', function () {
    mocha_1.it('should save the scriptId correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var isSaved = function () { return __awaiter(_this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_js_1.saveProject('12345')];
                    case 1:
                        _a.sent();
                        id = fs.readFileSync(path.join(__dirname, '/../.clasp.json'), 'utf8');
                        chai_1.expect(id).to.equal('{"scriptId":"12345"}');
                        return [2 /*return*/];
                }
            });
        }); };
        chai_1.expect(isSaved).to.not.equal(null);
    });
    mocha_1.it('should save the scriptId, rootDir correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var isSaved = function () { return __awaiter(_this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_js_1.saveProject('12345', './dist')];
                    case 1:
                        _a.sent();
                        id = fs.readFileSync(path.join(__dirname, '/../.clasp.json'), 'utf8');
                        chai_1.expect(id).to.equal('{"scriptId":"12345","rootDir":"./dist"}');
                        return [2 /*return*/];
                }
            });
        }); };
        chai_1.expect(isSaved).to.not.equal(null);
    });
});
mocha_1.describe('Test clasp apis functions', function () {
    mocha_1.it('should list apis correctly', function () {
        var result = spawnSync(CLASP, ['apis', 'list'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain('abusiveexperiencereport   - abusiveexperiencereport:v1');
        chai_1.expect(result.stdout).to.contain('youtubereporting          - youtubereporting:v1');
    });
    mocha_1.it('should enable apis correctly', function () {
        var result = spawnSync(CLASP, ['apis', 'enable'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain('In development...');
    });
    mocha_1.it('should disable apis correctly', function () {
        var result = spawnSync(CLASP, ['apis', 'disable'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain('In development...');
    });
    mocha_1.it('should show suggestions for using clasp apis', function () {
        var result = spawnSync(CLASP, ['apis'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain("Try:\n    clasp apis list");
    });
    mocha_1.it('should error with unknown subcommand', function () {
        var result = spawnSync(CLASP, ['apis', 'unknown'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain("Unknown command");
    });
});
mocha_1.describe.skip('Test clasp logs function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    mocha_1.it('should prompt for logs setup', function () {
        var result = spawnSync(CLASP, ['logs'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('What is your GCP projectId?');
    });
    mocha_1.it('should prompt for logs setup', function () {
        var result = spawnSync(CLASP, ['logs', '--setup'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain('Open this link:');
        var scriptId = JSON.parse(CLASP_SETTINGS).scriptId;
        chai_1.expect(result.stdout).to.include("https://script.google.com/d/" + scriptId + "/edit");
        chai_1.expect(result.stdout).to.contain('Go to *Resource > Cloud Platform Project...*');
        chai_1.expect(result.stdout).to.include('and copy your projectId\n(including "project-id-")');
        chai_1.expect(result.stdout).to.contain('What is your GCP projectId?');
    });
    after(cleanup);
});
mocha_1.describe('Test clasp login function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    beforeEach(backupSettings);
    afterEach(restoreSettings);
    mocha_1.it('should exit(0) with LOG.DEFAULT_CREDENTIALS for default login (no global or local rc)', function () {
        if (fs.existsSync(claspRcGlobalPath))
            fs.removeSync(claspRcGlobalPath);
        if (fs.existsSync(claspRcLocalPath))
            fs.removeSync(claspRcLocalPath);
        var result = spawnSync(CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain(utils_js_1.LOG.DEFAULT_CREDENTIALS);
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should exit(1) with ERROR.LOGGED_IN if global rc and no --creds option', function () {
        fs.writeFileSync(claspRcGlobalPath, FAKE_CLASPRC);
        var result = spawnSync(CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(claspRcGlobalPath);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.LOGGED_IN);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it('should exit(0) with ERROR.LOGGED_IN if local rc and --creds option', function () {
        fs.writeFileSync(claspRcLocalPath, FAKE_CLASPRC_LOCAL);
        var result = spawnSync(CLASP, ['login', '--creds', "" + clientCredsLocalPath, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(claspRcLocalPath);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.LOGGED_IN);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it.skip('should exit(1) with ERROR.CREDENTIALS_DNE if --creds file does not exist', function () {
        if (fs.existsSync(clientCredsLocalPath))
            fs.removeSync(clientCredsLocalPath);
        var result = spawnSync(CLASP, ['login', '--creds', "" + clientCredsLocalPath, '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.CREDENTIALS_DNE(clientCredsLocalPath));
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it.skip('should exit(1) with ERROR.BAD_CREDENTIALS_FILE if --creds file invalid', function () {
        fs.writeFileSync(clientCredsLocalPath, INVALID_CLIENT_CREDS);
        var result = spawnSync(CLASP, ['login', '--creds', "" + clientCredsLocalPath, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(clientCredsLocalPath);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it.skip('should exit(0) with ERROR.BAD_CREDENTIALS_FILE if --creds file corrupt json', function () {
        fs.writeFileSync(clientCredsLocalPath, rndStr());
        var result = spawnSync(CLASP, ['login', '--creds', "" + clientCredsLocalPath, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(clientCredsLocalPath);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it('should exit(0) with LOG.CREDENTIALS_FOUND if global rc and --creds file valid', function () {
        if (fs.existsSync(claspRcLocalPath))
            fs.removeSync(claspRcLocalPath);
        fs.writeFileSync(claspRcGlobalPath, FAKE_CLASPRC);
        fs.writeFileSync(clientCredsLocalPath, FAKE_CLIENT_CREDS);
        var result = spawnSync(CLASP, ['login', '--creds', "" + clientCredsLocalPath, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(claspRcGlobalPath);
        fs.removeSync(clientCredsLocalPath);
        chai_1.expect(result.stdout).to.contain(utils_js_1.LOG.CREDENTIALS_FOUND);
        chai_1.expect(result.status).to.equal(0);
    });
    after(cleanup);
});
mocha_1.describe('Test clasp logout function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    beforeEach(backupSettings);
    afterEach(restoreSettings);
    mocha_1.it('should remove global AND local credentails', function () {
        fs.writeFileSync(claspRcGlobalPath, FAKE_CLASPRC);
        fs.writeFileSync(claspRcLocalPath, FAKE_CLASPRC_LOCAL);
        var result = spawnSync(CLASP, ['logout'], { encoding: 'utf8' });
        chai_1.expect(fs.existsSync(claspRcGlobalPath)).to.equal(false);
        chai_1.expect(utils_js_1.hasOauthClientSettings()).to.equal(false);
        chai_1.expect(fs.existsSync(claspRcLocalPath)).to.equal(false);
        chai_1.expect(utils_js_1.hasOauthClientSettings(true)).to.equal(false);
        chai_1.expect(result.status).to.equal(0);
    });
    after(cleanup);
});
mocha_1.describe('Test clasp run function', function () {
    before(function () {
        if (isPR !== 'false') {
            this.skip();
        }
        setup();
    });
    mocha_1.it('should prompt for project ID', function () {
        var result = spawnSync(CLASP, ['run', 'myFunction'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('What is your GCP projectId?');
    });
    mocha_1.it('should prompt to set up new OAuth client', function () {
        fs.writeFileSync(claspSettingsLocalPath, CLASP_SETTINGS_FAKE_PROJECTID);
        var result = spawnSync(CLASP, ['run', 'myFunction'], { encoding: 'utf8' });
        fs.removeSync(claspSettingsLocalPath);
        chai_1.expect(result.stdout)
            .to.contain('https://console.developers.google.com/apis/credentials?project=');
        chai_1.expect(result.status).to.equal(0);
    });
    after(cleanup);
});
mocha_1.describe('Test variations of clasp help', function () {
    var expectHelp = function (variation) {
        var result = spawnSync(CLASP, [variation], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include(CLASP_USAGE);
    };
    mocha_1.it('should show help for clasp help', function () { return expectHelp('help'); });
    mocha_1.it('should show help for clasp --help', function () { return expectHelp('--help'); });
    mocha_1.it('should show help for clasp -h', function () { return expectHelp('-h'); });
});
mocha_1.describe('Test variations of clasp --version', function () {
    var expectVersion = function (variation) {
        var result = spawnSync(CLASP, [variation], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include(require('./../package.json').version);
    };
    mocha_1.it('should show version for clasp --version', function () { return expectVersion('--version'); });
    mocha_1.it('should show version for clasp -v', function () { return expectVersion('-v'); });
});
mocha_1.describe('Test unknown functions', function () {
    mocha_1.it('should show version correctly', function () {
        var result = spawnSync(CLASP, ['unknown'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain("Unknown command");
        chai_1.expect(result.status).to.equal(1);
    });
});
mocha_1.describe('Test all functions while logged out', function () {
    before(function () {
        if (fs.existsSync(claspRcGlobalPath))
            fs.removeSync(claspRcGlobalPath);
        if (fs.existsSync(claspRcLocalPath))
            fs.removeSync(claspRcLocalPath);
    });
    var expectNoCredentials = function (command) {
        var result = spawnSync(CLASP, [command], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.include(utils_js_1.ERROR.NO_CREDENTIALS);
    };
    mocha_1.it('should fail to list (no credentials)', function () { return expectNoCredentials('list'); });
    mocha_1.it('should fail to clone (no credentials)', function () { return expectNoCredentials('clone'); });
    mocha_1.it('should fail to push (no credentials)', function () { return expectNoCredentials('push'); });
    mocha_1.it('should fail to deployments (no credentials)', function () { return expectNoCredentials('deployments'); });
    mocha_1.it('should fail to deploy (no credentials)', function () { return expectNoCredentials('deploy'); });
    mocha_1.it('should fail to version (no credentials)', function () { return expectNoCredentials('version'); });
    mocha_1.it('should fail to versions (no credentials)', function () { return expectNoCredentials('versions'); });
    // TODO: all test should have same order of checks
    // and should all return ERROR.NO_CREDENTIALS
    mocha_1.it('should fail to pull (no .clasp.json file)', function () {
        var result = spawnSync(CLASP, ['pull'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // Should be ERROR.NO_CREDENTIALS
        // see: https://github.com/google/clasp/issues/278
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.SETTINGS_DNE);
    });
    mocha_1.it('should fail to open (no .clasp.json file)', function () {
        var result = spawnSync(CLASP, ['open'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // Should be ERROR.NO_CREDENTIALS
        // see: https://github.com/google/clasp/issues/278
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.SETTINGS_DNE);
    });
    // Skipping this, see: https://github.com/tj/commander.js/issues/840
    mocha_1.it.skip('should fail to redeploy (missing argument version)', function () {
        var result = spawnSync(CLASP, ['redeploy', '1234'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain('error: missing required argument \'version\'');
    });
    // Skipping this, see: https://github.com/tj/commander.js/issues/840
    mocha_1.it.skip('should fail to redeploy (missing argument deploymentId)', function () {
        var result = spawnSync(CLASP, ['redeploy'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain('error: missing required argument \'deploymentId\'');
    });
    mocha_1.it('should fail to show logs (no .clasp.json file)', function () {
        var result = spawnSync(CLASP, ['logs'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // Should be ERROR.NO_CREDENTIALS
        // see: https://github.com/google/clasp/issues/278
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.SETTINGS_DNE);
    });
});
