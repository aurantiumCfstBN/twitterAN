"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Clasp command method bodies.
 */
var chalk_1 = require("chalk");
var commander = require("commander");
var del = require("del");
var pluralize = require("pluralize");
var watch_1 = require("watch");
var auth_1 = require("./auth");
var files_1 = require("./files");
var utils_1 = require("./utils");
var open = require('opn');
var prompt = require('inquirer').prompt;
var padEnd = require('string.prototype.padend');
/**
 * Force downloads all Apps Script project files into the local filesystem.
 * @param cmd.version {number} The version number of the project to retrieve.
 *                             If not provided, the project's HEAD version is returned.
 */
exports.pull = function (cmd) { return __awaiter(_this, void 0, void 0, function () {
    var _a, scriptId, rootDir;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _b.sent();
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 2:
                _a = _b.sent(), scriptId = _a.scriptId, rootDir = _a.rootDir;
                if (scriptId) {
                    utils_1.spinner.setSpinnerTitle(utils_1.LOG.PULLING);
                    files_1.fetchProject(scriptId, rootDir, cmd.versionNumber);
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Uploads all files into the script.google.com filesystem.
 * TODO: Only push when a non-ignored file is changed.
 * TODO: Only push the specific files that changed (rather than all files).
 * @param cmd.watch {boolean} If true, runs `clasp push` when any local file changes. Exit with ^C.
 */
exports.push = function (cmd) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _a.sent();
                if (cmd.watch) {
                    console.log(utils_1.LOG.PUSH_WATCH);
                    // @see https://www.npmjs.com/package/watch
                    watch_1.watchTree('.', function (f, curr, prev) {
                        if (typeof f === 'string') { // The first watch doesn't give a string for some reason.
                            console.log("\n" + utils_1.LOG.PUSH_WATCH_UPDATED(f) + "\n");
                        }
                        console.log(utils_1.LOG.PUSHING);
                        files_1.pushFiles();
                    });
                }
                else {
                    utils_1.spinner.setSpinnerTitle(utils_1.LOG.PUSHING).start();
                    files_1.pushFiles();
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Outputs the help command.
 */
exports.help = function () {
    commander.outputHelp();
    process.exit(0);
};
/**
 * Displays a default message when an unknown command is typed.
 * @param command {string} The command that was typed.
 */
exports.defaultCmd = function (command) {
    utils_1.logError(null, utils_1.ERROR.COMMAND_DNE(command));
};
/**
 * Creates a new Apps Script project.
 * @param title {string} The title of the Apps Script project's file
 * @param parentId {string} The Drive ID of the G Suite doc this script is bound to.
 * @param cmd.rootDir {string} Specifies the local directory in which clasp will store your project files.
 *                    If not specified, clasp will default to the current directory.
 */
exports.create = function (title, parentId, cmd) { return __awaiter(_this, void 0, void 0, function () {
    var scriptId, err_1, res, createdScriptId, rootDir;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                if (files_1.hasProject())
                    return [2 /*return*/, utils_1.logError(null, utils_1.ERROR.FOLDER_EXISTS)];
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _a.sent();
                if (!!title) return [3 /*break*/, 4];
                return [4 /*yield*/, prompt([{
                            type: 'input',
                            name: 'title',
                            message: 'Give a script title:',
                            default: utils_1.getDefaultProjectName(),
                        }]).then(function (answers) {
                        title = answers.title;
                    }).catch(function (err) {
                        console.log(err);
                    })];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4:
                utils_1.spinner.setSpinnerTitle(utils_1.LOG.CREATE_PROJECT_START(title)).start();
                _a.label = 5;
            case 5:
                _a.trys.push([5, 7, , 8]);
                return [4 /*yield*/, utils_1.getProjectSettings(true)];
            case 6:
                scriptId = (_a.sent()).scriptId;
                if (scriptId) {
                    utils_1.logError(null, utils_1.ERROR.NO_NESTED_PROJECTS);
                    process.exit(1);
                }
                return [3 /*break*/, 8];
            case 7:
                err_1 = _a.sent();
                return [3 /*break*/, 8];
            case 8: return [4 /*yield*/, auth_1.script.projects.create({
                    requestBody: {
                        title: title,
                        parentId: parentId,
                    },
                })];
            case 9:
                res = _a.sent();
                if (res.status !== 200) {
                    utils_1.spinner.stop(true);
                    if (parentId) {
                        console.log(res.statusText, utils_1.ERROR.CREATE_WITH_PARENT);
                    }
                    utils_1.logError(res);
                    utils_1.logError(res.statusText, utils_1.ERROR.CREATE);
                }
                else {
                    utils_1.spinner.stop(true);
                    createdScriptId = res.data.scriptId || '';
                    console.log(utils_1.LOG.CREATE_PROJECT_FINISH(createdScriptId));
                    rootDir = cmd.rootDir;
                    utils_1.saveProject(createdScriptId, rootDir);
                    if (!utils_1.manifestExists()) {
                        files_1.fetchProject(createdScriptId, rootDir); // fetches appsscript.json, o.w. `push` breaks
                    }
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Fetches an Apps Script project.
 * Prompts the user if no script ID is provided.
 * @param scriptId {string} The Apps Script project ID to fetch.
 * @param versionNumber {string} An optional version to pull the script from.
 */
exports.clone = function (scriptId, versionNumber) { return __awaiter(_this, void 0, void 0, function () {
    var list_1, data, files, fileIds;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                if (!files_1.hasProject()) return [3 /*break*/, 2];
                utils_1.logError(null, utils_1.ERROR.FOLDER_EXISTS);
                return [3 /*break*/, 9];
            case 2:
                if (!!scriptId) return [3 /*break*/, 8];
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 3:
                _a.sent();
                return [4 /*yield*/, auth_1.drive.files.list({
                        // pageSize: 10,
                        // fields: 'files(id, name)',
                        orderBy: 'modifiedByMeTime desc',
                        q: 'mimeType="application/vnd.google-apps.script"',
                    })];
            case 4:
                list_1 = _a.sent();
                data = list_1.data;
                if (!data)
                    return [2 /*return*/, utils_1.logError(list_1.statusText, 'Unable to use the Drive API.')];
                files = data.files;
                if (!(files && files.length)) return [3 /*break*/, 6];
                fileIds = files.map(function (file) {
                    return {
                        name: padEnd(file.name, 20) + " - (" + file.id + ")",
                        value: file.id,
                    };
                });
                return [4 /*yield*/, prompt([{
                            type: 'list',
                            name: 'scriptId',
                            message: 'Clone which script? ',
                            choices: fileIds,
                        }]).then(function (answers) {
                        utils_1.checkIfOnline();
                        utils_1.spinner.setSpinnerTitle(utils_1.LOG.CLONING);
                        utils_1.saveProject(answers.scriptId);
                        files_1.fetchProject(answers.scriptId, '', versionNumber);
                    }).catch(function (err) {
                        console.log(err);
                    })];
            case 5:
                _a.sent();
                return [3 /*break*/, 7];
            case 6:
                console.log(utils_1.LOG.FINDING_SCRIPTS_DNE);
                _a.label = 7;
            case 7: return [3 /*break*/, 9];
            case 8:
                utils_1.spinner.setSpinnerTitle(utils_1.LOG.CLONING);
                utils_1.saveProject(scriptId);
                files_1.fetchProject(scriptId, '', versionNumber);
                _a.label = 9;
            case 9: return [2 /*return*/];
        }
    });
}); };
/**
 * Logs out the user by deleting credentials.
 */
exports.logout = function () {
    if (utils_1.hasOauthClientSettings(true))
        del(utils_1.DOT.RC.ABSOLUTE_LOCAL_PATH, { force: true });
    // del doesn't work with a relative path (~)
    if (utils_1.hasOauthClientSettings())
        del(utils_1.DOT.RC.ABSOLUTE_PATH, { force: true });
};
/**
 * Prints StackDriver logs from this Apps Script project.
 * @param cmd.json {boolean} If true, the command will output logs as json.
 * @param cmd.open {boolean} If true, the command will open the StackDriver logs website.
 * @param cmd.setup {boolean} If true, the command will help you setup logs.
 * @param cmd.watch {boolean} If true, the command will watch for logs and print them. Exit with ^C.
 */
exports.logs = function (cmd) { return __awaiter(_this, void 0, void 0, function () {
    /**
     * Prints log entries
     * @param entries {any[]} StackDriver log entries.
     */
    function printLogs(entries) {
        if (entries === void 0) { entries = []; }
        entries = entries.reverse(); // print in syslog ascending order
        for (var i = 0; i < 50 && entries ? i < entries.length : i < 0; ++i) {
            var _a = entries[i], severity = _a.severity, timestamp = _a.timestamp, resource = _a.resource, textPayload = _a.textPayload, protoPayload = _a.protoPayload, jsonPayload = _a.jsonPayload, insertId = _a.insertId;
            var functionName = resource.labels.function_name;
            functionName = functionName ? padEnd(functionName, 15) : utils_1.ERROR.NO_FUNCTION_NAME;
            var payloadData = '';
            if (cmd.json) {
                payloadData = JSON.stringify(entries[i], null, 2);
            }
            else {
                var data = {
                    textPayload: textPayload,
                    // chokes on unmatched json payloads
                    // jsonPayload: jsonPayload ? jsonPayload.fields.message.stringValue : '',
                    jsonPayload: jsonPayload ? JSON.stringify(jsonPayload).substr(0, 255) : '',
                    protoPayload: protoPayload,
                };
                payloadData = data.textPayload || data.jsonPayload || data.protoPayload || utils_1.ERROR.PAYLOAD_UNKNOWN;
                if (payloadData && payloadData['@type'] === 'type.googleapis.com/google.cloud.audit.AuditLog') {
                    payloadData = utils_1.LOG.STACKDRIVER_SETUP;
                    functionName = padEnd(protoPayload.methodName, 15);
                }
                if (payloadData && typeof (payloadData) === 'string') {
                    payloadData = padEnd(payloadData, 20);
                }
            }
            var coloredStringMap = {
                ERROR: chalk_1.default.red(severity),
                INFO: chalk_1.default.cyan(severity),
                DEBUG: chalk_1.default.green(severity),
                NOTICE: chalk_1.default.magenta(severity),
                WARNING: chalk_1.default.yellow(severity),
            };
            var coloredSeverity = coloredStringMap[severity] || severity;
            coloredSeverity = padEnd(String(coloredSeverity), 20);
            // If we haven't logged this entry before, log it and mark the cache.
            if (!logEntryCache[insertId]) {
                console.log(coloredSeverity + " " + timestamp + " " + functionName + " " + payloadData);
                logEntryCache[insertId] = true;
            }
        }
    }
    function setupLogs(projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            return __generator(this, function (_a) {
                promise = new Promise(function (resolve, reject) {
                    utils_1.getProjectSettings().then(function (projectSettings) {
                        console.log('Open this link: ', utils_1.LOG.SCRIPT_LINK(projectSettings.scriptId));
                        console.log("Go to *Resource > Cloud Platform Project...* and copy your projectId\n(including \"project-id-\")\n");
                        prompt([{
                                type: 'input',
                                name: 'projectId',
                                message: 'What is your GCP projectId?',
                            }]).then(function (answers) {
                            projectId = answers.projectId;
                            var dotfile = utils_1.DOTFILE.PROJECT();
                            if (dotfile) {
                                dotfile.read().then(function (settings) {
                                    if (!settings.scriptId)
                                        utils_1.logError(utils_1.ERROR.SCRIPT_ID_DNE);
                                    dotfile.write({ scriptId: settings.scriptId, projectId: projectId });
                                    resolve(projectId);
                                }).catch(function (err) {
                                    reject(utils_1.logError(err));
                                });
                            }
                            else {
                                reject(utils_1.logError(null, utils_1.ERROR.SETTINGS_DNE));
                            }
                        }).catch(function (err) {
                            reject(console.log(err));
                        });
                    });
                });
                promise.catch(function (err) {
                    utils_1.logError(err);
                    utils_1.spinner.stop(true);
                });
                return [2 /*return*/, promise];
            });
        });
    }
    /**
     * Fetches the logs and prints the to the user.
     * @param startDate {Date?} Get logs from this date to now.
     */
    function fetchAndPrintLogs(startDate) {
        return __awaiter(this, void 0, void 0, function () {
            var filter, logs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        utils_1.spinner.setSpinnerTitle("" + (utils_1.isLocalCreds(oauthSettings) ? utils_1.LOG.LOCAL_CREDS : '') + utils_1.LOG.GRAB_LOGS).start();
                        filter = '';
                        if (startDate) {
                            filter = "timestamp >= \"" + startDate.toISOString() + "\"";
                        }
                        return [4 /*yield*/, auth_1.logger.entries.list({
                                requestBody: {
                                    resourceNames: [
                                        "projects/" + projectId,
                                    ],
                                    filter: filter,
                                    orderBy: 'timestamp desc',
                                },
                            })];
                    case 1:
                        logs = _a.sent();
                        // We have an API response. Now, check the API response status.
                        utils_1.spinner.stop(true);
                        console.log(filter);
                        if (logs.status !== 200) {
                            switch (logs.status) {
                                case 401:
                                    utils_1.logError(null, utils_1.isLocalCreds(oauthSettings) ?
                                        utils_1.ERROR.UNAUTHENTICATED_LOCAL :
                                        utils_1.ERROR.UNAUTHENTICATED);
                                case 403:
                                    utils_1.logError(null, utils_1.isLocalCreds(oauthSettings) ?
                                        utils_1.ERROR.PERMISSION_DENIED_LOCAL :
                                        utils_1.ERROR.PERMISSION_DENIED);
                                default:
                                    utils_1.logError(null, "(" + logs.status + ") Error: " + logs.statusText);
                            }
                        }
                        else {
                            printLogs(logs.data.entries);
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    var logEntryCache, projectId, _a, url, oauthSettings, POLL_INTERVAL_1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _b.sent();
                logEntryCache = {};
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 2:
                projectId = (_b.sent()).projectId;
                if (!cmd.setup) return [3 /*break*/, 4];
                return [4 /*yield*/, setupLogs()];
            case 3:
                _a = _b.sent();
                return [3 /*break*/, 5];
            case 4:
                _a = projectId;
                _b.label = 5;
            case 5:
                projectId = _a;
                if (!!projectId) return [3 /*break*/, 7];
                console.log(utils_1.LOG.NO_GCLOUD_PROJECT);
                return [4 /*yield*/, setupLogs()];
            case 6:
                projectId = _b.sent();
                console.log(utils_1.LOG.LOGS_SETUP);
                _b.label = 7;
            case 7:
                // If we're opening the logs, get the URL, open, then quit.
                if (cmd.open) {
                    url = utils_1.URL.LOGS(projectId);
                    console.log("Opening logs: " + url);
                    return [2 /*return*/, open(url, { wait: false })];
                }
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 8:
                oauthSettings = _b.sent();
                if (cmd.watch) {
                    POLL_INTERVAL_1 = 6000;
                    setInterval(function () {
                        var startDate = new Date();
                        startDate.setSeconds(startDate.getSeconds() - (10 * POLL_INTERVAL_1 / 1000));
                        fetchAndPrintLogs(startDate);
                    }, POLL_INTERVAL_1);
                }
                else {
                    fetchAndPrintLogs();
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Executes an Apps Script function. Requires additional setup.
 * @param functionName {string} The function name within the Apps Script project.
 * @see https://developers.google.com/apps-script/api/how-tos/execute
 * @requires `clasp login --creds` to be run beforehand.
 */
exports.run = function (functionName, cmd) { return __awaiter(_this, void 0, void 0, function () {
    var oauthSettings, projectId, scriptId;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                oauthSettings = _a.sent();
                if (!!utils_1.isLocalCreds(oauthSettings)) return [3 /*break*/, 4];
                // script and the calling application share a common GCP project
                console.log("\n" + chalk_1.default.yellow('BASIC SCRIPT EXECUTION API SETUP') + "\n");
                return [4 /*yield*/, utils_1.getProjectId()];
            case 3:
                projectId = _a.sent();
                if (!projectId)
                    return [2 /*return*/, utils_1.logError(null, utils_1.ERROR.NO_GCLOUD_PROJECT)];
                console.log(utils_1.LOG.SETUP_LOCAL_OAUTH(projectId));
                process.exit(0);
                _a.label = 4;
            case 4: return [4 /*yield*/, auth_1.checkOauthScopes(oauthSettings)];
            case 5:
                _a.sent();
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 6:
                scriptId = (_a.sent()).scriptId;
                utils_1.spinner.setSpinnerTitle("" + (utils_1.isLocalCreds(oauthSettings) ? utils_1.LOG.LOCAL_CREDS : '') + utils_1.LOG.SCRIPT_RUN(functionName)).start();
                auth_1.script.scripts.run({
                    scriptId: scriptId,
                    requestBody: {
                        function: functionName,
                        devMode: cmd.dev,
                    },
                }, {}, function (err, response) {
                    utils_1.spinner.stop(true);
                    if (err) { // TODO move these to logError when stable?
                        switch (err.code) {
                            case 401:
                                utils_1.logError(null, utils_1.ERROR.UNAUTHENTICATED_LOCAL);
                            case 403:
                                utils_1.logError(null, utils_1.ERROR.PERMISSION_DENIED_LOCAL);
                            case 404:
                                utils_1.logError(null, utils_1.ERROR.EXECUTE_ENTITY_NOT_FOUND);
                            default:
                                utils_1.logError(null, "(" + err.code + ") Error: " + err.message);
                        }
                    }
                    else if (response && response.data.done) {
                        var data = response.data;
                        // @see https://developers.google.com/apps-script/api/reference/rest/v1/scripts/run#response-body
                        if (data.response) {
                            console.log("" + chalk_1.default.green('Result:'), data.response.result);
                        }
                        else if (data.error) {
                            // @see https://developers.google.com/apps-script/api/reference/rest/v1/scripts/run#Status
                            console.error("" + chalk_1.default.red('Exception:'), data.error.details[0].errorType, data.error.details[0].errorMessage, data.error.details[0].scriptStackTraceElements || []);
                        }
                    }
                    else {
                        utils_1.logError(null, utils_1.ERROR.RUN_NODATA);
                    }
                    process.exit(0); // exit gracefully in case localhost server spun up for authorize
                });
                return [2 /*return*/];
        }
    });
}); };
/**
 * Deploys an Apps Script project.
 * @param version {string} The project version to deploy at.
 * @param description {string} The deployment's description.
 */
exports.deploy = function (version, description) {
    if (description === void 0) { description = ''; }
    return __awaiter(_this, void 0, void 0, function () {
        function createDeployment(versionNumber) {
            return __awaiter(this, void 0, void 0, function () {
                var deployments;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            utils_1.spinner.setSpinnerTitle(utils_1.LOG.DEPLOYMENT_CREATE);
                            return [4 /*yield*/, auth_1.script.projects.deployments.create({
                                    scriptId: scriptId,
                                    requestBody: {
                                        description: description,
                                        manifestFileName: utils_1.PROJECT_MANIFEST_BASENAME,
                                        versionNumber: versionNumber,
                                    },
                                })];
                        case 1:
                            deployments = _a.sent();
                            utils_1.spinner.stop(true);
                            if (deployments.status !== 200) {
                                utils_1.logError(null, utils_1.ERROR.DEPLOYMENT_COUNT);
                            }
                            else {
                                console.log("- " + deployments.data.deploymentId + " @" + versionNumber + ".");
                            }
                            return [2 /*return*/];
                    }
                });
            });
        }
        var scriptId, version_1, versionNumber;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, auth_1.loadAPICredentials()];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, utils_1.getProjectSettings()];
                case 3:
                    scriptId = (_a.sent()).scriptId;
                    if (!scriptId)
                        return [2 /*return*/];
                    utils_1.spinner.setSpinnerTitle(utils_1.LOG.DEPLOYMENT_START(scriptId)).start();
                    if (!version) return [3 /*break*/, 4];
                    createDeployment(version);
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, auth_1.script.projects.versions.create({
                        scriptId: scriptId,
                        requestBody: {
                            description: description,
                        },
                    })];
                case 5:
                    version_1 = _a.sent();
                    utils_1.spinner.stop(true);
                    if (version_1.status !== 200) {
                        return [2 /*return*/, utils_1.logError(null, utils_1.ERROR.ONE_DEPLOYMENT_CREATE)];
                    }
                    versionNumber = version_1.data.versionNumber || 0;
                    console.log(utils_1.LOG.VERSION_CREATED(versionNumber));
                    createDeployment(versionNumber);
                    _a.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    });
};
/**
 * Removes a deployment from the Apps Script project.
 * @param deploymentId {string} The deployment's ID
 */
exports.undeploy = function (deploymentId) { return __awaiter(_this, void 0, void 0, function () {
    var scriptId, deployment;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _a.sent();
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 3:
                scriptId = (_a.sent()).scriptId;
                if (!scriptId)
                    return [2 /*return*/];
                utils_1.spinner.setSpinnerTitle(utils_1.LOG.UNDEPLOYMENT_START(deploymentId)).start();
                return [4 /*yield*/, auth_1.script.projects.deployments.delete({
                        scriptId: scriptId,
                        deploymentId: deploymentId,
                    })];
            case 4:
                deployment = _a.sent();
                utils_1.spinner.stop(true);
                if (deployment.status !== 200) {
                    return [2 /*return*/, utils_1.logError(null, utils_1.ERROR.READ_ONLY_DELETE)];
                }
                else {
                    console.log(utils_1.LOG.UNDEPLOYMENT_FINISH(deploymentId));
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Lists a user's Apps Script projects using Google Drive.
 */
exports.list = function () { return __awaiter(_this, void 0, void 0, function () {
    var filesList, files;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _a.sent();
                utils_1.spinner.setSpinnerTitle(utils_1.LOG.FINDING_SCRIPTS).start();
                return [4 /*yield*/, auth_1.drive.files.list({
                        pageSize: 50,
                        // fields isn't currently supported
                        // https://github.com/googleapis/google-api-nodejs-client/issues/1374
                        // fields: 'nextPageToken, files(id, name)',
                        q: 'mimeType="application/vnd.google-apps.script"',
                    })];
            case 3:
                filesList = _a.sent();
                utils_1.spinner.stop(true);
                if (filesList.status !== 200) {
                    return [2 /*return*/, utils_1.logError(null, utils_1.ERROR.DRIVE)];
                }
                files = filesList.data.files || [];
                if (files.length) {
                    files.map(function (file) {
                        console.log(padEnd(file.name, 20) + " \u2013 " + utils_1.URL.SCRIPT(file.id));
                    });
                }
                else {
                    console.log(utils_1.LOG.FINDING_SCRIPTS_DNE);
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Redeploys an Apps Script deployment.
 * @param deploymentId {string} The deployment ID to redeploy.
 * @param version {string} The version to redeploy at.
 * @param description {string} A description of the redeployment.
 */
exports.redeploy = function (deploymentId, version, description) { return __awaiter(_this, void 0, void 0, function () {
    var scriptId, deployments;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _a.sent();
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 3:
                scriptId = (_a.sent()).scriptId;
                return [4 /*yield*/, auth_1.script.projects.deployments.update({
                        scriptId: scriptId,
                        deploymentId: deploymentId,
                        requestBody: {
                            deploymentConfig: {
                                versionNumber: +version,
                                manifestFileName: utils_1.PROJECT_MANIFEST_BASENAME,
                                description: description,
                            },
                        },
                    })];
            case 4:
                deployments = _a.sent();
                utils_1.spinner.stop(true);
                if (deployments.status !== 200) {
                    return [2 /*return*/, utils_1.logError(null, deployments.statusText)]; // TODO prettier error
                }
                console.log(utils_1.LOG.REDEPLOY_END);
                return [2 /*return*/];
        }
    });
}); };
/**
 * Lists a script's deployments.
 */
exports.deployments = function () { return __awaiter(_this, void 0, void 0, function () {
    var scriptId, deployments, deploymentsList, numDeployments, deploymentWord;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _a.sent();
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 3:
                scriptId = (_a.sent()).scriptId;
                if (!scriptId)
                    return [2 /*return*/];
                utils_1.spinner.setSpinnerTitle(utils_1.LOG.DEPLOYMENT_LIST(scriptId)).start();
                return [4 /*yield*/, auth_1.script.projects.deployments.list({
                        scriptId: scriptId,
                    })];
            case 4:
                deployments = _a.sent();
                utils_1.spinner.stop(true);
                if (deployments.status !== 200) {
                    return [2 /*return*/, utils_1.logError(deployments.statusText)];
                }
                deploymentsList = deployments.data.deployments || [];
                numDeployments = deploymentsList.length;
                deploymentWord = pluralize('Deployment', numDeployments);
                console.log(numDeployments + " " + deploymentWord + ".");
                deploymentsList.map(function (_a) {
                    var deploymentId = _a.deploymentId, deploymentConfig = _a.deploymentConfig;
                    var versionString = !!deploymentConfig.versionNumber ?
                        "@" + deploymentConfig.versionNumber : '@HEAD';
                    var description = deploymentConfig.description ?
                        '- ' + deploymentConfig.description : '';
                    console.log("- " + deploymentId + " " + versionString + " " + description);
                });
                return [2 /*return*/];
        }
    });
}); };
/**
 * Lists versions of an Apps Script project.
 */
exports.versions = function () { return __awaiter(_this, void 0, void 0, function () {
    var scriptId, versions, data, numVersions;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _a.sent();
                utils_1.spinner.setSpinnerTitle('Grabbing versions...').start();
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 3:
                scriptId = (_a.sent()).scriptId;
                return [4 /*yield*/, auth_1.script.projects.versions.list({
                        scriptId: scriptId,
                        pageSize: 500,
                    })];
            case 4:
                versions = _a.sent();
                utils_1.spinner.stop(true);
                if (versions.status !== 200) {
                    return [2 /*return*/, utils_1.logError(versions.statusText)];
                }
                data = versions.data;
                if (data && data.versions && data.versions.length) {
                    numVersions = data.versions.length;
                    console.log(utils_1.LOG.VERSION_NUM(numVersions));
                    data.versions.reverse().map(function (version) {
                        console.log(utils_1.LOG.VERSION_DESCRIPTION(version));
                    });
                }
                else {
                    utils_1.logError(null, utils_1.LOG.DEPLOYMENT_DNE);
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Creates a new version of an Apps Script project.
 */
exports.version = function (description) { return __awaiter(_this, void 0, void 0, function () {
    var scriptId, versions;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _a.sent();
                utils_1.spinner.setSpinnerTitle(utils_1.LOG.VERSION_CREATE).start();
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 3:
                scriptId = (_a.sent()).scriptId;
                return [4 /*yield*/, auth_1.script.projects.versions.create({
                        scriptId: scriptId,
                        requestBody: {
                            description: description,
                        },
                    })];
            case 4:
                versions = _a.sent();
                utils_1.spinner.stop(true);
                if (versions.status !== 200) {
                    return [2 /*return*/, utils_1.logError(versions.statusText)];
                }
                console.log(utils_1.LOG.VERSION_CREATED(versions.data.versionNumber || -1));
                return [2 /*return*/];
        }
    });
}); };
/**
 * Displays the status of which Apps Script files are ignored from .claspignore
 * @param cmd.json {boolean} Displays the status in json format.
 */
exports.status = function (cmd) { return __awaiter(_this, void 0, void 0, function () {
    var _a, scriptId, rootDir;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _b.sent();
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 2:
                _a = _b.sent(), scriptId = _a.scriptId, rootDir = _a.rootDir;
                if (!scriptId)
                    return [2 /*return*/];
                files_1.getProjectFiles(rootDir, function (err, projectFiles) {
                    if (err)
                        return console.log(err);
                    if (projectFiles) {
                        var filesToPush = projectFiles[0], untrackedFiles = projectFiles[1];
                        if (cmd.json) {
                            console.log(JSON.stringify({ filesToPush: filesToPush, untrackedFiles: untrackedFiles }));
                        }
                        else {
                            console.log(utils_1.LOG.STATUS_PUSH);
                            filesToPush.forEach(function (file) { return console.log("\u2514\u2500 " + file); });
                            console.log(); // Separate Ignored files list.
                            console.log(utils_1.LOG.STATUS_IGNORE);
                            untrackedFiles.forEach(function (file) { return console.log("\u2514\u2500 " + file); });
                        }
                    }
                });
                return [2 /*return*/];
        }
    });
}); };
/**
 * Opens an Apps Script project's script.google.com editor.
 * @param scriptId {string} The Apps Script project to open.
 */
exports.openCmd = function (scriptId, cmd) { return __awaiter(_this, void 0, void 0, function () {
    var deploymentsList, deployments_1, deployment;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                if (!!scriptId) return [3 /*break*/, 3];
                return [4 /*yield*/, utils_1.getProjectSettings()];
            case 2:
                scriptId = (_a.sent()).scriptId;
                _a.label = 3;
            case 3:
                if (!(scriptId.length < 30)) return [3 /*break*/, 4];
                utils_1.logError(null, utils_1.ERROR.SCRIPT_ID_INCORRECT(scriptId));
                return [3 /*break*/, 7];
            case 4:
                // If we're not a web app, open the script URL.
                if (!cmd.webapp) {
                    console.log(utils_1.LOG.OPEN_PROJECT(scriptId));
                    return [2 /*return*/, open(utils_1.URL.SCRIPT(scriptId), { wait: false })];
                }
                // Otherwise, open the latest deployment.
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 5:
                // Otherwise, open the latest deployment.
                _a.sent();
                return [4 /*yield*/, auth_1.script.projects.deployments.list({
                        scriptId: scriptId,
                    })];
            case 6:
                deploymentsList = _a.sent();
                if (deploymentsList.status !== 200) {
                    return [2 /*return*/, utils_1.logError(deploymentsList.statusText)];
                }
                deployments_1 = deploymentsList.data.deployments || [];
                if (!deployments_1.length) {
                    utils_1.logError(null, utils_1.ERROR.SCRIPT_ID_INCORRECT(scriptId));
                }
                else {
                    deployments_1.sort(function (d1, d2) { return d1.updateTime.localeCompare(d2.updateTime); });
                    deployment = deployments_1[deployments_1.length - 1];
                    console.log(utils_1.LOG.OPEN_WEBAPP(deployment.deploymentId));
                    open(utils_1.getWebApplicationURL(deployment), { wait: false });
                }
                _a.label = 7;
            case 7: return [2 /*return*/];
        }
    });
}); };
/**
 * Acts as a router to apis subcommands
 * Calls functions for list, enable, or disable
 * Otherwise returns an error of command not supported
 */
exports.apis = function () { return __awaiter(_this, void 0, void 0, function () {
    var subcommand, command;
    var _this = this;
    return __generator(this, function (_a) {
        subcommand = process.argv[3];
        command = {
            list: function () { return __awaiter(_this, void 0, void 0, function () {
                var data, _i, _a, api;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
                        case 1:
                            _b.sent();
                            return [4 /*yield*/, auth_1.discovery.apis.list({
                                    preferred: true,
                                })];
                        case 2:
                            data = (_b.sent()).data;
                            data.items = data.items || [];
                            for (_i = 0, _a = data.items; _i < _a.length; _i++) {
                                api = _a[_i];
                                console.log(padEnd(api.name, 25) + " - " + padEnd(api.id, 30));
                            }
                            return [2 /*return*/];
                    }
                });
            }); },
            enable: function () { console.log('In development...'); },
            disable: function () { console.log('In development...'); },
            undefined: function () {
                console.log("Try:\n    clasp apis list");
            },
        };
        if (command[subcommand]) {
            command[subcommand]();
        }
        else {
            utils_1.logError(null, utils_1.ERROR.COMMAND_DNE('apis ' + subcommand));
        }
        return [2 /*return*/];
    });
}); };
